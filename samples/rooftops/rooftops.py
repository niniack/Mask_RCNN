"""
Mask R-CNN
Train on the rooftops dataset generated by the CVApp Image Annotator:
scanifly-cv.herokuapp.com

Copyright (c) 2020 Scanifly, Inc.
All Rights Reservered
Written by Nishant Aswani

Adapted from Matterport's balloon.py written by Waleed Abdulla
------------------------------------------------------------

Usage: import the module (see Jupyter notebooks for examples), or run from
       the command line as such:

    # Train a new model starting from pre-trained COCO weights
    python3 rooftops.py train --dataset=/path/to/rooftops/dataset --weights=coco

    # Resume training a model that you had trained earlier
    python3 rooftops.py train --dataset=/path/to/rooftops/dataset --weights=last

    # Train a new model starting from ImageNet weights
    python3 rooftops.py train --dataset=/path/to/rooftops/dataset --weights=imagenet
"""

import os
import sys
import json
import datetime
import numpy as np
import skimage.draw

# Root directory of the project
ROOT_DIR = os.path.abspath("../../")

# Import Mask RCNN
sys.path.append(ROOT_DIR)  # To find local version of the library
from mrcnn.config import Config
from mrcnn import model as modellib, utils

# Path to trained weights file
COCO_WEIGHTS_PATH = os.path.join(ROOT_DIR, "mask_rcnn_coco.h5")

# Directory to save logs and model checkpoints, if not provided
# through the command line argument --logs
DEFAULT_LOGS_DIR = os.path.join(ROOT_DIR, "logs")

############################################################
#  Configurations
############################################################


class RooftopsConfig(Config):

    """Configuration for training on the toy  dataset.
    Derives from the base Config class and overrides some values.
    """
    # Give the configuration a recognizable name
    NAME = "rooftops"

    # We use a GPU with 12GB memory, which can fit two images.
    # Adjust down if you use a smaller GPU.
    IMAGES_PER_GPU = 1

    # Number of classes (including background)
    NUM_CLASSES = 1 + 11 # rooftops

    # Number of training steps per epoch
    STEPS_PER_EPOCH = 100

    # Skip detections with < 90% confidence
    DETECTION_MIN_CONFIDENCE = 0.9

    VALIDATION_STEPS = 6

############################################################
#  Dataset
############################################################

class RooftopsDataset(utils.Dataset):

    def load_rooftops(self, dataset_dir, subset):
        """Load a subset of the Rooftops dataset.
        dataset_dir: Root directory of the dataset.
        subset: Subset to load: train or val
        """
        # Add classes
        self.add_class("rooftops", 1, "roofplane")
        self.add_class("rooftops", 2, "vent_pipe")
        self.add_class("rooftops", 3, "chimney")
        self.add_class("rooftops", 4, "attic_fan")
        self.add_class("rooftops", 5, "exhaust_fan")
        self.add_class("rooftops", 6, "box_vent")
        self.add_class("rooftops", 7, "sat_dish")
        self.add_class("rooftops", 8, "hvac")
        self.add_class("rooftops", 9, "skylight")
        self.add_class("rooftops", 10, "drain")
        self.add_class("rooftops", 11, "roof_hatch")

        # Scanifly's Custom Image Annotator at scanifly-cv.herokuapp.com
        # saves each image in the form:
        # {
        #   "label_type": "polygon",
        #   "label_class": "roofplane",
        #   "regions": [
        #     [
        #       {
        #         "x": 658.0869020397698,
        #         "y": 224.1028481223433
        #       },
        #       {
        #         "x": 830.8661992225506,
        #         "y": 99.03555960550167
        #       },
        #       {
        #         "x": 1020.1475045559264,
        #         "y": 229.1413282314418
        #       },
        #       {
        #         "x": 675.4779500169694,
        #         "y": 252.33108299436654
        #       }
        #     ]
        #   ],
        #   "object_id": 13
        # }

        # Train or validation dataset?
        assert subset in ["train", "val"]
        dataset_dir = os.path.join(dataset_dir, subset)

        for file in os.listdir(dataset_dir):
            if file.endswith(".JPG"):
                filename = os.path.splitext(file)[0]
                image_path = os.path.join(dataset_dir, file)
                label_path = os.path.join(dataset_dir, ("json/"+filename+"__annotations.json"))
                image = skimage.io.imread(image_path)
                height, width = image.shape[:2]
                try:
                    raw_labels = json.load(open(label_path))
                    self.add_image(
                        "rooftops",
                        image_id=filename,  # use file name as a unique image id
                        path=image_path,
                        width=width, height=height,
                        polygons=raw_labels)
                except:
                    continue

    def load_mask(self, image_id):
        """Generate instance masks for an image.
       Returns:
        masks: A bool array of shape [height, width, instance count] with
            one mask per instance.
        class_ids: a 1D array of class IDs of the instance masks.
        """
        image_info = self.image_info[image_id]
        if image_info["source"] != "rooftops":
            return super(self.__class__, self).load_mask(image_id)

        info = self.image_info[image_id]
        mask = np.zeros([info["height"], info["width"], len(info["polygons"])],
                        dtype=np.uint64)
        classes = np.zeros(len(info["polygons"]))
        for i, p in enumerate(info['polygons']):
            labelClass = p['label_class']
            if (labelClass == None):
                labelID = 0
            else:
                try:
                    labelID = self.class_names.index(labelClass)
                except:
                    labelID = 0
            classes[i] = int(labelID)
            xPoints, yPoints = self.configure_mask(p, info["height"], info["width"])
            rr, cc = skimage.draw.polygon(yPoints, xPoints)
            mask[rr, cc, i] = 1

        # Return mask, and array of class IDs of each instance. Since we have
        # one class ID only, we return an array of 1s
        return mask.astype(np.bool),  np.array(classes, dtype=np.int32)

    def configure_mask(self, info, height, width):

        ## received format ['regions'][0][i]['x']
        numPoints = len(info['regions'][-1])
        xPoints = np.zeros(numPoints)
        yPoints = np.zeros(numPoints)

        for i in range(numPoints):

            # If x value is greater than width
            if (info['regions'][-1][i]['x'] >= width):
                xPoints[i] = width
            else:
                xPoints[i] = info['regions'][-1][i]['x']

            # If y value is greater than height
            if (info['regions'][-1][i]['y'] >= height):
                yPoints[i] = height
            else:
                yPoints[i] = info['regions'][-1][i]['y']

        return xPoints, yPoints

    def image_reference(self, image_id):
        """Return the path of the image."""
        info = self.image_info[image_id]
        if info["source"] == "rooftops":
            return info["path"]
        else:
            super(self.__class__, self).image_reference(image_id)


def train(model):
    """Train the model."""
    # Training dataset.
    dataset_train = RooftopsDataset()
    dataset_train.load_rooftops(args.dataset, "train")
    dataset_train.prepare()

    # Validation dataset
    dataset_val = RooftopsDataset()
    dataset_val.load_rooftops(args.dataset, "val")
    dataset_val.prepare()

    # *** This training schedule is an example. Update to your needs ***
    # Since we're using a very small dataset, and starting from
    # COCO trained weights, we don't need to train too long. Also,
    # no need to train all layers, just the heads should do it.
    print("Training network heads")
    model.train(dataset_train, dataset_val,
                learning_rate=config.LEARNING_RATE,
                epochs=30,
                layers='heads')


############################################################
#  Training
############################################################

if __name__ == '__main__':
    import argparse

    # Parse command line arguments
    parser = argparse.ArgumentParser(
        description='Train Mask R-CNN to detect roofplanes and obstructions on rooftops.')
    parser.add_argument("command",
                        metavar="<command>",
                        help="'train' or 'splash'")
    parser.add_argument('--dataset', required=False,
                        metavar="/path/to/rooftops/dataset/",
                        help='Directory of the Rooftops dataset')
    parser.add_argument('--weights', required=True,
                        metavar="/path/to/weights.h5",
                        help="Path to weights .h5 file or 'coco'")
    parser.add_argument('--logs', required=False,
                        default=DEFAULT_LOGS_DIR,
                        metavar="/path/to/logs/",
                        help='Logs and checkpoints directory (default=logs/)')
    parser.add_argument('--image', required=False,
                        metavar="path or URL to image",
                        help='Image to apply the color splash effect on')
    parser.add_argument('--video', required=False,
                        metavar="path or URL to video",
                        help='Video to apply the color splash effect on')
    args = parser.parse_args()

    # Validate arguments
    if args.command == "train":
        assert args.dataset, "Argument --dataset is required for training"
    elif args.command == "splash":
        assert args.image or args.video,\
               "Provide --image or --video to apply color splash"

    print("Weights: ", args.weights)
    print("Dataset: ", args.dataset)
    print("Logs: ", args.logs)

    # Configurations
    if args.command == "train":
        config = RooftopsConfig()
    else:
        class InferenceConfig(RooftopsConfig):
            # Set batch size to 1 since we'll be running inference on
            # one image at a time. Batch size = GPU_COUNT * IMAGES_PER_GPU
            GPU_COUNT = 1
            IMAGES_PER_GPU = 1
        config = InferenceConfig()
    config.display()

    # Create model
    if args.command == "train":
        model = modellib.MaskRCNN(mode="training", config=config,
                                  model_dir=args.logs)
    else:
        model = modellib.MaskRCNN(mode="inference", config=config,
                                  model_dir=args.logs)

    # Select weights file to load
    if args.weights.lower() == "coco":
        weights_path = COCO_WEIGHTS_PATH
        # Download weights file
        if not os.path.exists(weights_path):
            utils.download_trained_weights(weights_path)
    elif args.weights.lower() == "last":
        # Find last trained weights
        weights_path = model.find_last()
    elif args.weights.lower() == "imagenet":
        # Start from ImageNet trained weights
        weights_path = model.get_imagenet_weights()
    else:
        weights_path = args.weights

    # Load weights
    print("Loading weights ", weights_path)
    if args.weights.lower() == "coco":
        # Exclude the last layers because they require a matching
        # number of classes
        model.load_weights(weights_path, by_name=True, exclude=[
            "mrcnn_class_logits", "mrcnn_bbox_fc",
            "mrcnn_bbox", "mrcnn_mask"])
    else:
        model.load_weights(weights_path, by_name=True)

    # Train or evaluate
    if args.command == "train":
        train(model)
    elif args.command == "splash":
        detect_and_color_splash(model, image_path=args.image,
                                video_path=args.video)
    else:
        print("'{}' is not recognized. "
              "Use 'train' or 'splash'".format(args.command))
